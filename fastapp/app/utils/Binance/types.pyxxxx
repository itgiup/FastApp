# from enum import Enum

# class CONNECTION_STATE(Enum):
#     CONNECTING = WebSocket.CONNECTING
#     OPEN = WebSocket.OPEN
#     CLOSING = WebSocket.CLOSING
#     CLOSED = WebSocket.CLOSED

# def connectionStateToColor(connectionState: CONNECTION_STATE = None) -> str:
#     if connectionState == CONNECTION_STATE.CLOSED:
#         return 'red'
#     elif connectionState == CONNECTION_STATE.CLOSING:
#         return 'yellow'
#     elif connectionState == CONNECTION_STATE.CONNECTING:
#         return 'yellow'
#     elif connectionState == CONNECTION_STATE.OPEN:
#         return 'green'
#     else:
#         return 'gray'

# class SymbolStatus(Enum):
#     PRE_TRADING = "PRE_TRADING"
#     TRADING = "TRADING"
#     POST_TRADING = "POST_TRADING"
#     END_OF_DAY = "END_OF_DAY"
#     HALT = "HALT"
#     AUCTION_MATCH = "AUCTION_MATCH"
#     BREAK = "BREAK"

# class Permissions(Enum):
#     SPOT = 'SPOT'
#     MARGIN = 'MARGIN'
#     TRD_GRP_002 = 'TRD_GRP_002'
#     TRD_GRP_003 = 'TRD_GRP_003'
#     TRD_GRP_004 = 'TRD_GRP_004'
#     TRD_GRP_005 = 'TRD_GRP_005'
#     TRD_GRP_006 = 'TRD_GRP_006'
#     TRD_GRP_007 = 'TRD_GRP_007'
#     TRD_GRP_008 = 'TRD_GRP_008'
#     TRD_GRP_009 = 'TRD_GRP_009'
#     TRD_GRP_010 = 'TRD_GRP_010'
#     TRD_GRP_011 = 'TRD_GRP_011'
#     TRD_GRP_012 = 'TRD_GRP_012'
#     TRD_GRP_013 = 'TRD_GRP_013'
#     TRD_GRP_014 = 'TRD_GRP_014'
#     TRD_GRP_015 = 'TRD_GRP_015'
#     TRD_GRP_016 = 'TRD_GRP_016'
#     TRD_GRP_017 = 'TRD_GRP_017'
#     TRD_GRP_018 = 'TRD_GRP_018'
#     TRD_GRP_019 = 'TRD_GRP_019'
#     TRD_GRP_020 = 'TRD_GRP_020'
#     TRD_GRP_021 = 'TRD_GRP_021'
#     TRD_GRP_022 = 'TRD_GRP_022'
#     TRD_GRP_023 = 'TRD_GRP_023'
#     TRD_GRP_024 = 'TRD_GRP_024'
#     TRD_GRP_025 = 'TRD_GRP_025'

# class OrderStatus(Enum):
#     NEW = "NEW"
#     PARTIALLY_FILLED = "PARTIALLY_FILLED"
#     FILLED = "FILLED"
#     CANCELED = "CANCELED"
#     PENDING_CANCEL = "PENDING_CANCEL"
#     REJECTED = "REJECTED"
#     EXPIRED = "EXPIRED"
#     EXPIRED_IN_MATCH = "EXPIRED_IN_MATCH"

# class ListStatusType(Enum):
#     RESPONSE = 'RESPONSE'
#     EXEC_STARTED = 'EXEC_STARTED'
#     ALL_DONE = 'ALL_DONE'

# class ListOrderStatus(Enum):
#     EXECUTING = 'EXECUTING'
#     ALL_DONE = 'ALL_DONE'
#     REJECT = 'REJECT'

# class ContingencyType(Enum):
#     OCO = 'OCO'
#     OTO = 'OTO'

# class WorkingFloor(Enum):
#     EXCHANGE = 'EXCHANGE'
#     SOR = 'SOR'

# class OrderType(Enum):
#     LIMIT = 'LIMIT'
#     MARKET = 'MARKET'
#     STOP_LOSS = 'STOP_LOSS'
#     STOP_LOSS_LIMIT = 'STOP_LOSS_LIMIT'
#     TAKE_PROFIT = 'TAKE_PROFIT'
#     TAKE_PROFIT_LIMIT = 'TAKE_PROFIT_LIMIT'
#     LIMIT_MAKER = 'LIMIT_MAKER'

# class NewOrderRespType(Enum):
#     ACK = 'ACK'
#     RESULT = 'RESULT'
#     FULL = 'FULL'

# class OrderSide(Enum):
#     BUY = 'BUY'
#     SELL = 'SELL'

# class TimeInForce(Enum):
#     GTC = 'GTC'
#     IOC = 'IOC'
#     FOK = 'FOK'

# class RateLimitType(Enum):
#     REQUEST_WEIGHT = 'REQUEST_WEIGHT'
#     ORDERS = 'ORDERS'
#     RAW_REQUESTS = 'RAW_REQUESTS'

# class RateLimitInterval(Enum):
#     SECOND = 'SECOND'
#     MINUTE = 'MINUTE'
#     DAY = 'DAY'

# class STPModes(Enum):
#     NONE = 'NONE'
#     EXPIRE_MAKER = 'EXPIRE_MAKER'
#     EXPIRE_TAKER = 'EXPIRE_TAKER'
#     EXPIRE_BOTH = 'EXPIRE_BOTH'

# class AllowedSelfTradePreventionMode(Enum):
#     EXPIRE_TAKER = 'EXPIRE_TAKER'
#     EXPIRE_MAKER = 'EXPIRE_MAKER'
#     EXPIRE_BOTH = 'EXPIRE_BOTH'

# class Permission(Enum):
#     SPOT = 'SPOT'
#     MARGIN = 'MARGIN'
#     TRD_GRP_ = 'TRD_GRP_'

# class SpotSymbolInformation:
#     symbol: str
#     status: str
#     baseAsset: str
#     baseAssetPrecision: int
#     quoteAsset: str
#     quotePrecision: int
#     quoteAssetPrecision: int
#     baseCommissionPrecision: int
#     quoteCommissionPrecision: int
#     orderTypes: List[OrderType]
#     icebergAllowed: bool
#     ocoAllowed: bool
#     otoAllowed: bool
#     quoteOrderQtyMarketAllowed: bool
#     allowTrailingStop: bool
#     cancelReplaceAllowed: bool
#     isSpotTradingAllowed: bool
#     isMarginTradingAllowed: bool
#     filters: List[Dict[str, Any]]
#     permissions: List[Any]
#     permissionSets: List[Permission]
#     defaultSelfTradePreventionMode: AllowedSelfTradePreventionMode
#     allowedSelfTradePreventionModes: List[AllowedSelfTradePreventionMode]

# class SpotExchangeInfo:
#     timezone: str
#     serverTime: int
#     rateLimits: List[RateLimit]
#     exchangeFilters: List[Any]
#     symbols: List[SpotSymbolInformation]

# class ContractType(Enum):
#     PERPETUAL = 'PERPETUAL'
#     CURRENT_MONTH = 'CURRENT_MONTH'
#     NEXT_MONTH = 'NEXT_MONTH'
#     CURRENT_QUARTER = 'CURRENT_QUARTER'
#     NEXT_QUARTER = 'NEXT_QUARTER'
#     PERPETUAL_DELIVERING = 'PERPETUAL_DELIVERING'

# class ContractStatus(Enum):
#     PENDING_TRADING = 'PENDING_TRADING'
#     TRADING = 'TRADING'
#     PRE_DELIVERING = 'PRE_DELIVERING'
#     DELIVERING = 'DELIVERING'
#     DELIVERED = 'DELIVERED'
#     PRE_SETTLE = 'PRE_SETTLE'
#     SETTLING = 'SETTLING'
#     CLOSE = 'CLOSE'

# class FutureOrderStatus(Enum):
#     NEW = "NEW"
#     PARTIALLY_FILLED = "PARTIALLY_FILLED"
#     FILLED = "FILLED"
#     CANCELED = "CANCELED"
#     REJECTED = "REJECTED"
#     EXPIRED = "EXPIRED"
#     EXPIRED_IN_MATCH = "EXPIRED_IN_MATCH"

# class FutureOrderType(Enum):
#     LIMIT = 'LIMIT'
#     MARKET = 'MARKET'
#     STOP = 'STOP'
#     STOP_MARKET = 'STOP_MARKET'
#     TAKE_PROFIT = 'TAKE_PROFIT'
#     TAKE_PROFIT_MARKET = 'TAKE_PROFIT_MARKET'
#     TRAILING_STOP_MARKET = 'TRAILING_STOP_MARKET'

# class PositionSide(Enum):
#     BOTH = 'BOTH'
#     LONG = 'LONG'
#     SHORT = 'SHORT'

# class FutureTimeInforce(Enum):
#     GTC = 'GTC'
#     IOC = 'IOC'
#     FOK = 'FOK'
#     GTX = 'GTX'
#     GTD = 'GTD'

# class WorkingType(Enum):
#     MARK_PRICE = 'MARK_PRICE'
#     CONTRACT_PRICE = 'CONTRACT_PRICE'

# class ResponseType(Enum):
#     ACK = 'ACK'
#     RESULT = 'RESULT'

# class PriceMatch(Enum):
#     NONE = "NONE"
#     OPPONENT = "OPPONENT"
#     OPPONENT_5 = "OPPONENT_5"
#     OPPONENT_10 = "OPPONENT_10"
#     OPPONENT_20 = "OPPONENT_20"
#     QUEUE = "QUEUE"
#     QUEUE_5 = "QUEUE_5"
#     QUEUE_10 = "QUEUE_10"
#     QUEUE_20 = "QUEUE_20"

# class RateLimit:
#     rateLimitType: RateLimitType
#     interval: RateLimitInterval
#     intervalNum: int
#     limit: int

# class AssetInformation:
#     asset: str
#     marginAvailable: bool
#     autoAssetExchange: int

# class FilterType(Enum):
#     PRICE_FILTER = "PRICE_FILTER"
#     LOT_SIZE = "LOT_SIZE"
#     MARKET_LOT_SIZE = "MARKET_LOT_SIZE"
#     MAX_NUM_ORDERS = "MAX_NUM_ORDERS"
#     MAX_NUM_ALGO_ORDERS = "MAX_NUM_ALGO_ORDERS"
#     PERCENT_PRICE = "PERCENT_PRICE"
#     MIN_NOTIONAL = "MIN_NOTIONAL"

# class Filter:
#     filterType: FilterType
#     maxPrice: str
#     minPrice: str
#     tickSize: str

# class FutureSymbolInformation:
#     symbol: str
#     pair: str
#     contractType: str
#     deliveryDate: int
#     onboardDate: int
#     status: str
#     maintMarginPercent: str
#     requiredMarginPercent: str
#     baseAsset: str
#     quoteAsset: str
#     marginAsset: str
#     pricePrecision: int
#     quantityPrecision: int
#     baseAssetPrecision: int
#     quotePrecision: int
#     underlyingType: str
#     underlyingSubType: List[str]
#     triggerProtect: str
#     liquidationFee: str
#     marketTakeBound: str
#     maxMoveOrderLimit: int
#     settlePlan: int
#     filters: List[Filter]
#     orderTypes: List[FutureOrderType]
#     timeInForce: List[FutureTimeInforce]

# class FutureExchangeInfo:
#     timezone: str
#     serverTime: int
#     rateLimits: List[RateLimit]
#     exchangeFilters: List[FilterType]
#     assets: List[AssetInformation]
#     symbols: List[FutureSymbolInformation]

# class Kline(Enum):
#     openTime = 0
#     open = 1
#     high = 2
#     low = 3
#     close = 4
#     volume = 5
#     closeTime = 6
#     quoteAssetVolume = 7
#     numberOfTrades = 8
#     takerBuyBaseAssetVolume = 9
#     takerBuyQuoteAssetVolume = 10

# class Trade:
#     e: str = 'trade'
#     E: int
#     s: str
#     t: int
#     p: str
#     q: str
#     T: int
#     m: bool
#     M: bool

# class AggTrade:
#     e: str = "aggTrade"
#     E: int
#     s: str
#     a: int
#     p: str
#     q: str
#     f: int
#     l: int
#     T: int
#     m: bool
#     M: bool

# class MarkPriceUpdate:
#     e: str = "markPriceUpdate"
#     E: int
#     s: str
#     p: str
#     i: str
#     P: str
#     r: str
#     T: int

# class KlineStream:
#     e: str = "kline"
#     E: int
#     s: str
#     k: Dict[str, Union[int, str, bool]]

# class ContinuousKline:
#     e: str = 'continuous_kline'
#     E: int
#     ps: str
#     ct: str
#     k: Dict[str, Union[int, str, bool]]

# class MiniTicker:
#     e: str = '24hrMiniTicker'
#     E: int
#     s: str
#     c: str
#     o: str
#     h: str
#     l: str
#     v: str
#     q: str

# class Ticker24hr:
#     e: str = '24hrTicker'
#     E: int
#     s: str
#     p: str
#     P: str
#     w: str
#     c: str
#     Q: str
#     o: str
#     h: str
#     l: str
#     v: str
#     q: str
#     O: int
#     C: int
#     F: int
#     L: int
#     n: int

# class Ticker24hrResponse:
#     symbol: str
#     priceChange: str
#     priceChangePercent: str
#     weightedAvgPrice: str
#     prevClosePrice: str
#     lastPrice: str
#     lastQty: str
#     bidPrice: str
#     bidQty: str
#     askPrice: str
#     askQty: str
#     openPrice: str
#     highPrice: str
#     lowPrice: str
#     volume: str
#     quoteVolume: str
#     openTime: int
#     closeTime: int
#     firstId: int
#     lastId: int
#     count: int

# class BookTicker:
#     e: str
#     u: int
#     E: int
#     T: int
#     s: str
#     b: List[str]
#     a: List[str]

# class ForceOrder:
#     e: str = 'forceOrder'
#     E: int
#     o: Dict[str, Union[str, int, bool]]

# class DepthUpdate:
#     e: str = 'depthUpdate'
#     E: int
#     T: int
#     s: str
#     U: int
#     u: int
#     pu: int
#     b: List[str]
#     a: List[str]

# class CompositeIndex:
#     e: str = 'compositeIndex'
#     E: int
#     s: str
#     p: str
#     C: str
#     c: List[Dict[str, str]]

# class ContractInfo:
#     e: str = 'contractInfo'
#     E: int
#     s: str
#     ps: str
#     ct: str
#     dt: int
#     ot: int
#     cs: str
#     bks: List[Dict[str, Union[int, str]]]

# class AssetIndexUpdate:
#     e: str = 'assetIndexUpdate'
#     E: int
#     s: str
#     i: str
#     b: str
#     a: str
#     B: str
#     A: str
#     q: str
#     g: str
#     Q: str
#     G: str
